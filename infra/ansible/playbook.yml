---
- name: Deploy Docker Compose Application on Debian 12
  hosts: all
  vars:
    ghcr_username: "{{ github_username }}"
    ghcr_token: "{{ github_token }}"
    external_hostname: "{{ external_hostname }}"
    internal_hostname: "{{ internal_hostname }}"

    db_user: "{{ db_user }}"
    db_pass: "{{ db_pass }}"

    s3_bucket: "{{ s3_bucket }}"

    domain: "{{ domain }}"
    jwt_secret: "{{ jwt_secret }}"
    docker_image_tag: "{{ docker_image_tag }}"
  pre_tasks:
    - name: Install prerequisites for Docker
      become: true
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: true

    - name: Add Docker GPG key
      become: true
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository
      become: true
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
        state: present
        filename: docker

    - name: Install Docker and dependencies
      become: true
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Ensure docker service is running
      become: true
      service:
        name: docker
        state: started
        enabled: true

    - name: Ensure "docker" group exist
      group:
        name: docker
        state: present

    - name: Add admin user to docker group
      become: true
      user:
        name: admin
        group: docker
        append: true

    - name: Login to GitHub Container Registry (ghcr.io)
      community.docker.docker_login:
        registry_url: ghcr.io
        username: "{{ ghcr_username }}"
        password: "{{ ghcr_token }}"

    - name: Ensure /opt/app directory exists and is writable by admin user
      become: true
      file:
        path: /opt/app
        state: directory
        owner: admin
        group: admin
        mode: '0740'
        recurse: true

  tasks:
    - name: Copy docker-compose.yml to the server
      copy:
        src: docker-compose.yaml
        dest: /opt/app/docker-compose.yml
        owner: admin
        group: admin
        mode: '0640'

    - name: Generate the Caddyfile
      template:
        src: Caddyfile
        dest: /opt/app/Caddyfile
        owner: admin
        group: admin
        mode: '0640'

    - name: Generate the .env
      template:
        src: env_template
        dest: /opt/app/.env
        owner: admin
        group: admin
        mode: '0640'

    - name: Deploy Docker Compose application using Compose V2
      register: docker_compose_result
      community.docker.docker_compose_v2:
        project_src: /opt/app
        state: present
        pull: always

    - name: Execute the database migration(s)
      when: docker_compose_result.changed
      community.docker.docker_compose_v2_exec:
        project_src: /opt/app
        service: server
        command: > 
          /bin/sh -c "DB_MIGRATION_PATH='./dist/database/migrations/*.js' 
          ./node_modules/typeorm/cli.js migration:run -d ./dist/database/data-source.js"

